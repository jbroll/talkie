# Test audio filtering and dynamic confidence thresholds

package require tcltest
namespace import ::tcltest::*

# Add paths for mock modules and jbr packages
set script_dir [file dirname [file normalize [info script]]]
lappend auto_path [file join $script_dir mocks]
lappend auto_path "$::env(HOME)/.local/lib/tcllib2.0"

# Require needed packages
package require jbr::unix
package require jbr::pipe

# Load mock modules first
package require audio
package require pa
package require vosk
package require uinput

# Load required modules
source [file join [file dirname [info script]] .. config.tcl]
source [file join [file dirname [info script]] .. textproc.tcl]
source [file join [file dirname [info script]] .. audio.tcl]

# Mock global variables that would normally be set by the main app
set ::transcribing 0
set ::audiolevel 0
set ::confidence 0
set ::vosk_recognizer mock_vosk_recognizer

# Mock functions that would normally be provided by main app
proc parse_and_display_result {result} {
    # Just store the result for testing
    lappend ::test_results $result
}

proc partial_text {text} {
    set ::test_partial_text $text
}

proc final_text {text conf} {
    lappend ::test_final_results [list $text $conf]
}

proc state_save {state} {
    # Mock state persistence
}

proc state_load {} {
    return 0
}

proc textproc_reset {} {
    # Mock textproc reset
}

# Initialize test variables
set ::test_results {}
set ::test_partial_text ""
set ::test_final_results {}

test audio_energy_stats-1.1 {Test energy buffer management} -setup {
    # Reset audio module state
    set ::audio::energy_buffer {}
    set ::audio::initialization_complete 1
} -body {
    # Add some energy values
    for {set i 1} {$i <= 15} {incr i} {
        ::audio::update_energy_stats [expr {$i * 2.0}]
    }

    # Check buffer contains our 15 values
    llength $::audio::energy_buffer
} -result {15}

test audio_percentiles-1.1 {Test noise and speech floor calculation} -setup {
    # Reset and set up known energy values - need > 10 for the function to work
    set ::audio::energy_buffer {1 2 3 4 5 10 15 20 25 30 35}  ;# 11 values
    set ::audio::noise_floor 0
    set ::audio::speech_floor 0

    # Set config percentiles
    set ::config(noise_floor_percentile) 10
    set ::config(speech_floor_percentile) 70
} -body {
    ::audio::calculate_percentiles

    # 10th percentile of 11 values at index 1 should be 2
    # 70th percentile of 11 values at index 7 should be 20
    list $::audio::noise_floor $::audio::speech_floor
} -result {2 20}

test dynamic_threshold-1.1 {Test dynamic confidence threshold calculation} -setup {
    # Set up known values
    set ::audio::speech_floor 20.0
    set ::audio::initialization_complete 1
    set ::audiolevel 15.0  ;# Below speech floor

    set ::config(confidence_threshold) 100
    set ::config(speech_min_multiplier) 0.8
    set ::config(speech_max_multiplier) 1.5
    set ::config(max_confidence_penalty) 50
} -body {
    set threshold [::audio::get_dynamic_confidence_threshold]

    # Energy 15.0, speech floor 20.0
    # Min energy = 20.0 * 0.8 = 16.0
    # Max energy = 20.0 * 1.5 = 30.0
    # Since 15.0 < 16.0, penalty should be max (50)
    # Threshold = 100 + 50 = 150
    set threshold
} -result {150}

test dynamic_threshold-1.2 {Test dynamic threshold with high energy} -setup {
    # Set up known values
    set ::audio::speech_floor 20.0
    set ::audio::initialization_complete 1
    set ::audiolevel 35.0  ;# Above max energy

    set ::config(confidence_threshold) 100
    set ::config(speech_min_multiplier) 0.8
    set ::config(speech_max_multiplier) 1.5
    set ::config(max_confidence_penalty) 50
} -body {
    set threshold [::audio::get_dynamic_confidence_threshold]

    # Energy 35.0, speech floor 20.0
    # Min energy = 16.0, Max energy = 30.0
    # Since 35.0 >= 30.0, penalty should be 0
    # Threshold = 100 + 0 = 100
    set threshold
} -result {100}

test dynamic_threshold-1.3 {Test dynamic threshold with medium energy} -setup {
    # Set up known values
    set ::audio::speech_floor 20.0
    set ::audio::initialization_complete 1
    set ::audiolevel 23.0  ;# Between min and max

    set ::config(confidence_threshold) 100
    set ::config(speech_min_multiplier) 0.8
    set ::config(speech_max_multiplier) 1.5
    set ::config(max_confidence_penalty) 50
} -body {
    set threshold [::audio::get_dynamic_confidence_threshold]

    # Energy 23.0, speech floor 20.0
    # Min energy = 16.0, Max energy = 30.0
    # Ratio = (23.0 - 16.0) / (30.0 - 16.0) = 7/14 = 0.5
    # Penalty = 50 * (1.0 - 0.5) = 25
    # Threshold = 100 + 25 = 125
    set threshold
} -result {125.0}

test audio_callback-1.1 {Test audio callback with initialization} -setup {
    # Reset audio state
    set ::audio::initialization_complete 0
    set ::audio::energy_buffer {}
    set ::config(initialization_samples) 5
    set ::test_partial_text ""

    # Add missing config parameters
    set ::config(audio_threshold_multiplier) 2.5
    set ::config(lookback_seconds) 1.0
    set ::config(silence_seconds) 1.0

    # Mock audio energy
    ::audio::set_mock_energy 10.0
} -body {
    # Simulate several audio callbacks during initialization
    set results {}
    for {set i 0} {$i < 6} {incr i} {
        ::audio::audio_callback "mock_stream" [expr {$i * 100}] "mock_data"
        lappend results $::audio::initialization_complete
    }

    # Should complete initialization after 5 samples (at index 4, then stay complete)
    set results
} -result {0 0 0 0 1 1}

puts "Audio filtering tests created. Run with: cd tests && ./all_tests.tcl"